import random
import subprocess
import sys
import time

#  as generated by the generator, all in degrees
generation_long_range = 10
generation_lat_range = 10
generation_min_long = 30
generation_min_lat = 30

seeder_url = 'http://192.168.0.53:7003'
python_exe = str(sys.executable)
print('interpreter: ' + python_exe)
trigger_script = 'trigger.py'


def main():
    total_entities = int(sys.argv[1])
    client_index = sys.argv[2]
    seed_entities_amount = sys.argv[3]

    processes = []
    for i in range(1, 2):
        processes.append(run_trigger(total_entities, seed_entities_amount))
        processes.append(run_listener(client_index))

    time.sleep(3)  # otherwise next line might block the other processes
    input("Press enter to terminate")
    for process in processes:
        if process is not None:
            process.kill()


def run_trigger(total_entities, seed_entities_amount):
    # compute client's area of interest size
    entity_density = total_entities / (generation_long_range * generation_lat_range)  # generator dimensions
    area_lat_size = 1  # degrees
    area_long_size = 100 / (entity_density * area_lat_size)  # ensure 100 entities on average

    area_min_lat = random.uniform(30, 40 - area_lat_size)
    area_min_long = random.uniform(30, 40 - area_long_size)
    area_max_lat = area_min_lat + area_lat_size
    area_max_long = area_min_long + area_long_size

    command_and_params = [python_exe, trigger_script, seeder_url, seed_entities_amount,
                          str(area_min_long), str(area_max_long), str(area_min_lat), str(area_max_lat)]
    return subprocess.Popen(command_and_params, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)


def run_listener(client_index):
    pass  # TODO


if __name__ == "__main__":
    main()
